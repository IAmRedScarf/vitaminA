    class Solution {

        public boolean canPartition(int[] nums) {
            return canPartition20230337(nums);
        }


        public boolean canPartition20230337(int[] nums) {
            int sum = 0;
            for (int num : nums) {
                sum += num;
            }
            if ((sum & 1) == 1) {
                return false;
            }
            int targetSum = sum / 2;
            int len = nums.length;
            boolean[][] dp = new boolean[len + 1][targetSum + 1];
            dp[0][0] = true;
            for (int i = 0; i < len; ++i) {
                dp[i + 1][0] = true;
            }
            for (int i = 1; i < len; ++i) {
                for (int j = 1; j <= targetSum; ++j) {
                    if (nums[i] > j) {
                        dp[i + 1][j] = dp[i][j];
                    } else {
                        dp[i + 1][j] = dp[i][j] || dp[i + 1][j - nums[i]];
                    }
                }
            }
            return dp[len][targetSum];
        }












        public boolean canPartition_20220507(int[] nums) {
            int sum = 0;
            for (int num : nums) {
                sum += num;
            }
            if ((sum & 1) == 1) {
                return false;
            }
            int target = sum / 2;
            boolean[] dp = new boolean[1 + target];
            dp[0] = true;
            for (int i = 0; i < nums.length; ++i) {
                for (int j = target; j >= 0; --j) {
                    int curNum = nums[i];
                    if (j < curNum) {
                        dp[j] = dp[j];
                    } else {
                        dp[j] = dp[j] || dp[j - curNum];
                    }
                }
            }
            return dp[target];

        }

        public boolean canPartition_old(int[] nums) {
            if (nums == null || nums.length <= 1) {
                return false;
            }
            int sum = 0;
            for (int num : nums) {
                sum += num;
            }
            if (sum % 2 == 1) {
                return false;
            }
            int targetSum = sum / 2;

//            boolean[][] dp = new boolean[nums.length + 1][targetSum + 1];
//            dp[0][0] = true;
//            for (int target = 1; target <= targetSum; target++) {
//                for (int i = 1; i <= nums.length; ++i) {
//                    int curNum = nums[i - 1];
//                    if (curNum > target)  {
//                        dp[i][target] = dp[i - 1][target];
//                    } else {
//                        dp[i][target] = dp[i - 1][target - curNum] || dp[i - 1][target];
//                    }
//                }
//            }
//
//            return dp[nums.length][targetSum];
            boolean[] dp = new boolean[targetSum + 1];
            dp[0] = true;
            for (int i = 1; i <= nums.length; ++i) {
                for (int target = targetSum; target >= 0; --target) {
                    int curNum = nums[i - 1];
                    if (curNum <= target) {
                        dp[target] = dp[target] || dp[target - curNum];
                    }
                }
            }
            return dp[targetSum];
        }
    }

//total_testcases:141
//total_correct:125
//input_formatted:[1,2,5]
//expected_output:false
//code_output:true
