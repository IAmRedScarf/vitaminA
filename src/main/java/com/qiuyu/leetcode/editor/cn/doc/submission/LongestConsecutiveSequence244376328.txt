    class Solution {
        public int longestConsecutive(int[] nums) {
            return f2(nums);
        }

        private int f1(int[] nums) {
            if (nums == null || nums.length == 0) {
                return 0;
            }
            int res = 0;
            Set<Integer> originSet = Arrays.stream(nums).boxed().collect(Collectors.toSet());
            Set<Integer> tmpSet = new HashSet<>();
            for (int num : nums) {
                if (tmpSet.contains(num)) {
                    continue;
                }
                int cur = num;
                while (originSet.contains(cur)) {
                    tmpSet.add(cur);
                    ++cur;
                }
                res = Math.max(res, cur - num);
            }
            return res;
        }

        private int f2(int[] nums) {
            if (nums == null || nums.length == 0) {
                return 0;
            }
            int res = 0;
            Set<Integer> originSet = Arrays.stream(nums).boxed().collect(Collectors.toSet());
            for (int num : nums) {
                if (originSet.contains(num - 1)) {
                    continue;
                }
                int cur = num;
                int count = 0;
                while (originSet.contains(cur)) {
                    ++cur;
                    count++;
                }
                res = Math.max(res, count);
            }
            return res;
        }
    }

//runtime:286 ms
//memory:48.3 MB
