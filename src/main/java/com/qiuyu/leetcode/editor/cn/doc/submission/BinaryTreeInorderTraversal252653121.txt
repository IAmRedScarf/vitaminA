
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public List<Integer> inorderTraversal(TreeNode root) {
//            List<Integer> res = new ArrayList<>();
//            mTraverse(root, res);
            return mTraverse1(root);
        }

        public void mTraverse(TreeNode root, List<Integer> res) {
            if (root != null) {
                mTraverse(root.left, res);
                res.add(root.val);
                mTraverse(root.right, res);
            }
        }

        private List<Integer> mTraverse1(TreeNode root) {
            List<Integer> res = new ArrayList<>();
            Deque<TreeNode> tmpStack = new LinkedList<>();
            TreeNode p = root;
            while (p != null || !tmpStack.isEmpty()) {
                while (p != null) {
                    tmpStack.push(p);
                    p = p.left;
                }
                p = tmpStack.pop();
                res.add(p.val);
                p = p.right;
            }
            return res;

        }


    }

//runtime:0 ms
//memory:36.5 MB
