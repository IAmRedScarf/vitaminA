    class Solution {
        public int canCompleteCircuit(int[] gas, int[] cost) {
            if (gas == null || cost == null || gas.length != cost.length) {
                throw new IllegalArgumentException();
            }
            if (gas.length == 0) {
                return -1;
            }
            int n = gas.length;
            for (int i = 0; i < n; ++i) {
                int remain = gas[i];
                int j = i;
                while (remain - cost[j] >= 0) {
                    remain = remain - cost[j] + gas[(j + 1) % n];
                    j = (j + 1) % n;
                    if (j == i) {
                        return i;
                    }
                }
                if (j < i) {
                    return -1;
                }
                i = j;
//                while (count > 0) {
//                    if (remain >= cost[j]) {
//                        remain = remain - cost[j] + gas[(j + 1) % n];
//                        count--;
//                        j = (j + 1) % n;
//                    } else {
//                        break;
//                    }
//                }
//                if (count == 0) {
//                    return i;
//                } else if (j < i) {
//                    return - 1;
//                } else {
//                    i = j;
//                }
            }
            return -1;


//            for (int i = 0; i < n; ++i) {
//                int remain = gas[i];
//                int j = i;
//                while (remain - cost[j] >= 0) {
//                    remain = remain - cost[j] + gas[(j + 1) % n];
//                    j = (j + 1) % n;
//                    if (j == i) {
//                        return i;
//                    }
//                }
//            }


//            for (int i = 0; i < n; ++i) {
//                int remain = gas[i];
//                int j = i;
//                while (remain - cost[j] >= 0) {
//                    remain = remain - cost[j] + gas[(j + 1) % n];
//                    j = (j + 1) % n;
//                    if (j == i) {
//                        return i;
//                    }
//                }
//                if (j < i) {
//                    break;
//                }
//                i = j;
//            }
//            return -1;
        }
    }

//runtime:4 ms
//memory:61.2 MB
