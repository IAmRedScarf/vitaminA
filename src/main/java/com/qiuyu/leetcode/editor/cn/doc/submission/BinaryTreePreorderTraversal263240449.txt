
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public List<Integer> preorderTraversal(TreeNode root) {
            List<Integer> res = new ArrayList<>();
            Deque<TreeNode> tmpStack = new LinkedList<>();
            TreeNode p = root;
//            while (p != null || !tmpStack.isEmpty()) {
//                while (p != null) {
//                    res.add(p.val);
//                    tmpStack.push(p.right);
//                    p = p.left;
//                }
//                p = tmpStack.pop();
//            }
//            return res;
            while (!tmpStack.isEmpty() || p != null) {
                if (p == null) {
                    p = tmpStack.pop();
                }
                res.add(p.val);
                if (p.right != null) {
                    tmpStack.push(p.right);
                }
                p = p.left;
            }
            return res;
        }
    }

//runtime:0 ms
//memory:40.2 MB
